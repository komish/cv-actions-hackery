name: Build Rolling Images
# This workflow will build images on each merge to the
# defined branches. This allows developers and consumers to
# consume features for a limited time before a formal release
# is cut. 
on:
  push:
    branches: [ main, ghactions ]
env:
  IMAGE_NAME: chart-verifier-actions-testing
jobs:
  build-rolling:
    name: Build and push main snapshot images
    # strategy: 
    #   matrix:
    #     architecture: [amd64,ppc64le,arm64,s390x]
    #     platform: [linux]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Fetch latest release version
      uses: reloc8/action-latest-release-version@1.0.0
      id: fetch-latest-release
    - name: Set Env Tags
      run: echo RELEASE_TAG=${{ steps.fetch-latest-release.outputs.latest-release }} >> $GITHUB_ENV
    - name: set short sha
      run: echo SHA_SHORT=$(git rev-parse --short HEAD) >> $GITHUB_ENV

    # - name: Set up QEMU
    #   uses: docker/setup-qemu-action@v2
        
    - name: Build Image
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ secrets.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
        # tags: ${{ env.SHA_SHORT }}-${{ matrix.platform }}-${{ matrix.architecture }}
        tags: ${{ env.SHA_SHORT }}
        # archs: ${{ matrix.architecture }}
        build-args: |
          quay_expiration=1w
          release_tag=${{ env.RELEASE_TAG }}+${{ github.sha }}
        # ARCH=${{ matrix.architecture }}
        dockerfiles: |
          ./Dockerfile
    - name: Push Image
      id: push-image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ env.IMAGE_NAME }}
        # tags: ${{ env.SHA_SHORT }}-${{ matrix.platform }}-${{ matrix.architecture }}
        tags: ${{ env.SHA_SHORT }}
        registry: ${{ secrets.IMAGE_REGISTRY }}
        username: ${{ secrets.REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Print image url
      run: echo "Image pushed to ${{ steps.push-image.outputs.registry-paths }}"
    
    outputs:
      imageName: ${{ env.IMAGE_NAME }}
      imageVersion: ${{ env.SHA_SHORT }}